from lda.parser import Parser
from lda.errors.handler import Logger
from lda.errors import syntax
from lda.context import ContextStack

from datetime import datetime
from time import clock
import platform

class DefaultOptions:
	ignore_case = False
	extra_js_code = ""
	stats_comment = True

class CompilationFailed(Exception):
	"""
	Raised when a program contains syntactic or semantic errors.

	The `errors` attribute is a list of LDAError instances sorted by position.
	The `buf` attribute is the source code buffer (may be used to format the
	marker line when pretty-printing the errors).
	"""
	def __init__(self, error_list, buf):
		super().__init__("Compilation failed")
		self.errors = sorted(error_list, key=lambda e: e.pos.char)
		self.buf = buf

def build_tree(options, buf, path=None):
	assert buf is not None or path
	if buf is None and path is not None:
		with open(path, 'rt', encoding='utf-8') as f:
			buf = f.read()
	c0 = clock()
	try:
		p = Parser(options, buf, path)
		module = p.analyze_module()
		assert p.eof(), "program couldn't be parsed entirely"
	except syntax.SyntaxError as e:
		raise CompilationFailed([e], buf)
	c1 = clock()
	logger = Logger()
	module.check(ContextStack(options), logger)
	if logger:
		raise CompilationFailed(logger.errors, buf)
	module.tt_syntax = c1 - c0
	module.tt_semantic = clock() - c1
	return module

def translate_tree(options, module, fmt=None):
	if not fmt:
		fmt = options.format
	c0 = clock()
	if fmt == 'lda':
		src = module.quicklda()
		comment = "(*\n{}\n*)"
	elif fmt == 'js':
		src = module.quickjs()
		comment = "/*\n{}\n */"
		if options.extra_js_code:
			src += "\n\n// extra_js_code -----\n" + options.extra_js_code
	else:
		raise Exception("Format de sortie inconnu : " + fmt)
	module.tt_translation = clock() - c0
	if options.stats_comment:
		info = (" * Generated by ldac - {date} on {machine}\n"
				" * syntax.........{syntax} ms\n"
				" * semantic.......{semantic} ms\n"
				" * translation....{translation} ms").format(
				date=datetime.now().strftime("%c"),
				machine=platform.node(),
				syntax=int(module.tt_syntax*1000),
				semantic=int(module.tt_semantic*1000),
				translation=int(module.tt_translation*1000))
	else:
		info = " * Generated by ldac"
	return (comment + "\n{}\n").format(info, src)
